{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GVCF to VDS Pipeline Documentation","text":"<p>Welcome to the official documentation for the GVCF to VDS Pipeline. This tool facilitates the conversion of GVCF files into Hail VariantDataset (VDS) and provides common VDS operations.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Usage</li> <li>API Reference</li> <li>Contributing</li> <li>About</li> </ul>"},{"location":"about/","title":"About","text":"<p>This package is developed at the University of Tartu, Institute of Clinical Medicine under the project Oligogenic Inheritance in Genetic Diseases.</p>"},{"location":"about/#project-overview","title":"Project Overview","text":"<p>The GVCF to VDS Pipeline is designed to streamline the conversion of GVCF (Genomic VCF) files into Hail VariantDataset (VDS) format.</p>"},{"location":"about/#contact","title":"Contact","text":"<p>For more information or inquiries, please contact markus.marandi@ut.ee.</p>"},{"location":"api_reference/","title":"API Reference","text":""},{"location":"api_reference/#gvcf_to_vds_pipelineclicommand_setup","title":"<code>gvcf_to_vds_pipeline.cli.command_setup</code>","text":""},{"location":"api_reference/#setup_parser","title":"<code>setup_parser()</code>","text":"<p>Sets up the argument parser for the CLI tool.</p> <p>Returns:</p> <ul> <li><code>argparse.ArgumentParser</code>: Configured argument parser.</li> </ul>"},{"location":"api_reference/#command_handlersargs-conf","title":"<code>command_handlers(args, conf)</code>","text":"<p>Retrieves the appropriate handler function based on the command.</p> <p>Parameters:</p> <ul> <li><code>args</code>: Parsed command-line arguments.</li> <li><code>conf</code>: Configuration for Spark/Hail.</li> </ul> <p>Returns:</p> <ul> <li><code>dict</code>: Mapping of commands to their handler functions.</li> </ul>"},{"location":"api_reference/#setup_spark_configargs","title":"<code>setup_spark_config(args)</code>","text":"<p>Configures Spark settings based on provided arguments.</p> <p>Parameters:</p> <ul> <li><code>args</code>: Parsed command-line arguments.</li> </ul> <p>Returns:</p> <ul> <li><code>SparkConf</code>: Configured Spark configuration.</li> </ul>"},{"location":"api_reference/#gvcf_to_vds_pipelinedata_processinggvcfprocess","title":"<code>gvcf_to_vds_pipeline.data_processing.gvcf.process</code>","text":""},{"location":"api_reference/#build_or_combine_vdsgvcf_paths-output_path-existing_vdsnone","title":"<code>build_or_combine_vds(gvcf_paths, output_path, existing_vds=None)</code>","text":"<p>Combines multiple GVCF files into a single VDS.</p> <p>Parameters:</p> <ul> <li><code>gvcf_paths (list)</code>: List of paths to GVCF files.</li> <li><code>output_path (str)</code>: Path to save the combined VDS.</li> <li><code>existing_vds (str, optional)</code>: Path to an existing VDS to update.</li> </ul> <p>Returns:</p> <ul> <li><code>None</code></li> </ul>"},{"location":"api_reference/#gvcf_to_vds_pipelinedata_processinggvcfread","title":"<code>gvcf_to_vds_pipeline.data_processing.gvcf.read</code>","text":""},{"location":"api_reference/#read_gvcffile_path","title":"<code>read_gvcf(file_path)</code>","text":"<p>Reads a single GVCF file.</p> <p>Parameters:</p> <ul> <li><code>file_path (str)</code>: Path to the GVCF file.</li> </ul> <p>Returns:</p> <ul> <li><code>VariantDataset</code>: Parsed VariantDataset.</li> </ul>"},{"location":"api_reference/#gvcf_to_vds_pipelinedata_processingvdsoperations","title":"<code>gvcf_to_vds_pipeline.data_processing.vds.operations</code>","text":""},{"location":"api_reference/#filter_samplesvds-samples_to_keep","title":"<code>filter_samples(vds, samples_to_keep)</code>","text":"<p>Filters samples in the VDS.</p> <p>Parameters:</p> <ul> <li><code>vds (VariantDataset)</code>: The original VariantDataset.</li> <li><code>samples_to_keep (list)</code>: List of sample IDs to retain.</li> </ul> <p>Returns:</p> <ul> <li><code>VariantDataset</code>: Filtered VariantDataset.</li> </ul>"},{"location":"api_reference/#split_multivds","title":"<code>split_multi(vds)</code>","text":"<p>Splits multi-allelic variants in the VDS.</p> <p>Parameters:</p> <ul> <li><code>vds (VariantDataset)</code>: The original VariantDataset.</li> </ul> <p>Returns:</p> <ul> <li><code>VariantDataset</code>: VariantDataset with split multi-allelic variants.</li> </ul>"},{"location":"api_reference/#gvcf_to_vds_pipelineutilsconfig","title":"<code>gvcf_to_vds_pipeline.utils.config</code>","text":""},{"location":"api_reference/#load_configconfig_path","title":"<code>load_config(config_path)</code>","text":"<p>Loads configuration from a JSON file.</p> <p>Parameters:</p> <ul> <li><code>config_path (str)</code>: Path to the JSON configuration file.</li> </ul> <p>Returns:</p> <ul> <li><code>dict</code>: Configuration data.</li> </ul>"},{"location":"api_reference/#gvcf_to_vds_pipelineutilslogging","title":"<code>gvcf_to_vds_pipeline.utils.logging</code>","text":""},{"location":"api_reference/#setup_logginglog_level","title":"<code>setup_logging(log_level)</code>","text":"<p>Configures logging for the application.</p> <p>Parameters:</p> <ul> <li><code>log_level (str)</code>: Logging level (e.g., 'INFO', 'DEBUG').</li> </ul> <p>Returns:</p> <ul> <li><code>logging.Logger</code>: Configured logger.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for considering contributing to the GVCF to VDS Pipeline! Your contributions are highly appreciated.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<p>1. Fork the Repository</p> <p>Click the \"Fork\" button at the top-right corner of the repository page to create your own fork.</p> <p>2. Clone Your Fork</p> <pre><code>git clone https://github.com/oligogeneticdiseases/gvcf-to-vds-pipeline.git\ncd gvcf-to-vds-pipeline\n</code></pre> <p>Make your changes and commit them to your fork.</p> <p>3. Create a Pull Request</p> <p>Once you have made your changes, push them to your fork and create a pull request. We will review your changes and merge them into the main repository.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python: Ensure you have Python 3.7 or higher installed.</li> <li>Hail: Required for VariantDataset operations.</li> <li>PySpark: Necessary for distributed data processing.</li> </ul>"},{"location":"installation/#install-via-pypi","title":"Install via PyPI","text":"<p>You can install the package using <code>pip</code>:</p> <pre><code>pip install gvcf_to_vds_pipeline\n</code></pre>"},{"location":"installation/#clone-from-github","title":"Clone from GitHub","text":"<p>Alternatively, clone the repository and install locally:</p> <pre><code>git clone https://github.com/OligoGeneticDiseases/gvcf-to-vds-pipeline.git\ncd gvcf-to-vds-pipeline\npip install .\n</code></pre>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<p>After installation, verify that the CLI tool is accessible:</p> <pre><code>gvcf-to-vds --help\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>The GVCF to VDS Pipeline provides a command-line interface (CLI) to perform various operations. Below are the primary commands and their usage.</p>"},{"location":"usage/#available-commands","title":"Available Commands","text":"<ul> <li><code>readgvcfs</code>: Combine GVCF files into a VDS.</li> <li><code>filter_samples</code>: Filter samples in a VariantDataset.</li> <li><code>filter_intervals</code>: Filter intervals in a VDS.</li> <li><code>sample_qc</code>: Compute sample quality control metrics.</li> <li><code>split_multi</code>: Split multi-allelic variants in a VDS.</li> <li><code>to_dense_mt</code>: Convert a VariantDataset to a dense MatrixTable.</li> </ul>"},{"location":"usage/#command-syntax","title":"Command Syntax","text":"<pre><code>gvcf-to-vds &lt;command&gt; [options]\n</code></pre>"},{"location":"usage/#example-convert-gvcfs-to-vds","title":"Example: Convert GVCFs to VDS","text":"<p>The <code>readgvcfs</code> command reads GVCF files and converts them to VDS format.</p> <pre><code>gvcf-to-vds readgvcfs \\\n  -f /path/to/gvcf_files \\\n  -d /path/to/output_vds \\\n  --temp /path/to/temp_dir \\\n  --use_genome_intervals\n</code></pre>"},{"location":"usage/#detailed-command-usage","title":"Detailed Command Usage","text":"<p>For detailed information on each command, use the --help flag:</p> <pre><code>gvcf-to-vds &lt;command&gt; --help\n</code></pre> <p>Example</p> <pre><code>gvcf-to-vds readgvcfs --help\n</code></pre>"}]}